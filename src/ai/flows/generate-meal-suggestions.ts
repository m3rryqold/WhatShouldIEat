// This file is generated by Gemini.

'use server';

/**
 * @fileOverview Meal suggestion AI agent.
 *
 * - generateMealSuggestions - A function that handles the meal suggestion process.
 * - GenerateMealSuggestionsInput - The input type for the generateMealSuggestions function.
 * - GenerateMealSuggestionsOutput - The return type for the generateMealSuggestions function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateMealSuggestionsInputSchema = z.object({
  dietaryPreferences: z
    .string()
    .describe(
      'A comma separated list of dietary preferences such as low carb, high protein, low histamine. Use only these values.'
    ),
  location: z.string().describe('The location of the user.'),
  cuisinePreferences: z
    .string()
    .describe(
      'A comma separated list of cuisine preferences such as Nigerian, Portuguese, Italian. Use only these values.'
    ),
});
export type GenerateMealSuggestionsInput = z.infer<
  typeof GenerateMealSuggestionsInputSchema
>;

const MealSuggestionObjectSchema = z.object({
  name: z.string().describe('The name or title of the meal.'),
  description: z.string().optional().describe('A short, appealing description of the meal (1-2 sentences).'),
  imageKeywords: z.string().optional().describe("1-3 descriptive keywords for generating an appetizing food photography image (e.g., 'grilled salmon lemon dill', 'avocado toast poached egg'). These keywords will be directly used to generate an image."),
});

const GenerateMealSuggestionsOutputSchema = z.array(MealSuggestionObjectSchema).describe("An array of meal suggestion objects.");
export type GenerateMealSuggestionsOutput = z.infer<
  typeof GenerateMealSuggestionsOutputSchema
>;

export async function generateMealSuggestions(
  input: GenerateMealSuggestionsInput
): Promise<GenerateMealSuggestionsOutput> {
  return generateMealSuggestionsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMealSuggestionsPrompt',
  input: {schema: GenerateMealSuggestionsInputSchema},
  output: {schema: GenerateMealSuggestionsOutputSchema},
  prompt: `You are a meal suggestion expert. Based on the user's preferences, provide a list of 3 to 5 meal suggestions.

Dietary Preferences: {{{dietaryPreferences}}}
Location: {{{location}}}
Cuisine Preferences: {{{cuisinePreferences}}}

Each suggestion must be an object with the following fields:
- "name": string (the meal title)
- "description": string (a short, appealing description of the meal, 1-2 sentences)
- "imageKeywords": string (1-3 descriptive keywords suitable for generating an appetizing food photography image, e.g., 'grilled salmon lemon dill', 'avocado toast poached egg'. These keywords will be directly used to generate an image.)

Respond with ONLY a valid JSON array of these meal objects. Do not include any other text or explanation.
Example of a single meal object:
{
  "name": "Spicy Jollof Rice with Grilled Chicken",
  "description": "A classic West African dish featuring fragrant rice cooked in a rich tomato-based sauce, served with perfectly grilled chicken.",
  "imageKeywords": "jollof rice grilled chicken"
}
`,
});

const generateMealSuggestionsFlow = ai.defineFlow(
  {
    name: 'generateMealSuggestionsFlow',
    inputSchema: GenerateMealSuggestionsInputSchema,
    outputSchema: GenerateMealSuggestionsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);

